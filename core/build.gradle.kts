import org.gradle.jvm.tasks.Jar
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    java
    kotlin("jvm")
}
sourceSets.main {
    java.setSrcDirs(listOf("src/", layout.buildDirectory.dir("/generated/sources/annotationProcessor/java/main")))
    kotlin.setSrcDirs(listOf("src/"))
}

tasks{
    withType<KotlinCompile>().configureEach {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    val generateLocales by registering {
        outputs.cacheIf { true }
        val outFile = projectDir.resolve("assets/locales")
        outputs.file(outFile).withPropertyName("outFile")
        val bundles = projectDir.resolve("assets/bundles/").list()!!
            .filter { it.startsWith("bundle_") }
            .map { it.substring("bundle_".length, it.lastIndexOf('.')) }
            .sorted()
        inputs.property("bundles", bundles.toTypedArray())
        doLast {
            outFile.writeText(bundles.joinToString("\n"))
        }
    }
    val generateBasePartNames by registering {
        outputs.cacheIf { true }
        val outFile = projectDir.resolve("assets/basepartnames")
        outputs.file(outFile)
        val baseParts = projectDir.resolve("assets/baseparts/").list()!!.sorted()
        inputs.property("baseParts", baseParts.toTypedArray())
        doLast {
            outFile.writeText(baseParts.joinToString("\n"))
        }
    }
    val writeVersion by registering(WriteProperties::class) {
        destinationFile.set(projectDir.resolve("assets/version.properties"))
        comment = "Autogenerated file. Do not modify."
        property("type", findProperty("versionType") ?: "official")
        property("modifier", findProperty("versionModifier") ?: "release")
        property("number", '7')
        property("build", findProperty("buildversion") ?: "custom build")
    }
    processResources.configure {
        dependsOn(generateLocales, generateBasePartNames, writeVersion)
    }

    val allAssets by registering {
        dependsOn(processResources, ":tools:pack")
        outputs.dir("assets")
    }
    val assetsJar by registering(Jar::class) {
        from(allAssets) {
            exclude("config", "cache", "music", "sounds")
        }
    }
}