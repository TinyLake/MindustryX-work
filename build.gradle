buildscript{
    ext{
        arcHash = property("archash")

        localArc = !project.hasProperty("release") && new File(rootDir.parent, 'Arc').exists() && !project.hasProperty("noLocalArc")

        arcModule = { String name ->
            //skip to last submodule
            name = name.substring(name.lastIndexOf(':') + 1)
            return "com.github.anuken${localArc ? "" : ".Arc"}:$name:$arcHash"
        }
    }
}

plugins{
    id "org.jetbrains.kotlin.jvm" version "1.6.0"
    id "org.jetbrains.kotlin.kapt" version "1.6.0"
}

allprojects{
    apply plugin: 'maven-publish'
    
    version = project.hasProperty("packageVersion") ? project.getProperty("packageVersion") : 'release'
    group = 'cf.wayzer.MindustryX'

    ext{
        versionNumber = '7'
        if(!project.hasProperty("versionModifier")) versionModifier = 'release'
        if(!project.hasProperty("versionType")) versionType = 'MindustryX'
        appName = 'Mindustry'
        steamworksVersion = '0b86023401880bb5e586bc404bedbaae9b1f1c94'
        rhinoVersion = '73a812444ac388ac2d94013b5cadc8f70b7ea027'

        loadVersionProps = {
            return new Properties().with{p -> p.load(file('../core/assets/version.properties').newReader()); return p }
        }

        getBuildVersion = {
            if(!project.hasProperty("buildversion")) return "custom build"
            return project.getProperties()["buildversion"]
        }
    }

    repositories{
        mavenLocal()
        mavenCentral()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url "https://oss.sonatype.org/content/repositories/releases/" }
        maven{ url 'https://jitpack.io' }
    }

    tasks.withType(JavaCompile){
        targetCompatibility = 8
        if(project.name == "annotations"){
            sourceCompatibility = 8
            options.setFork(true)
        }else{
            sourceCompatibility = JavaVersion.VERSION_17
            if(project.name != "android")
                options.release = 8
//            if(project.name == "core" || project.name == "annotations" || project.name == "desktop")
//                options.setFork(true)
        }
        sourceCompatibility = project.name != "annotations" ? JavaVersion.VERSION_17 : 8
        if(project.name != "android" && project.name != "annotations")
            options.release = 8
        if(project.name == "core" || project.name == "annotations")
            options.setFork(true)
        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:deprecation"]
    }
}

//compile with java 8 compatibility for everything except the annotation project
configure(subprojects - project(":annotations")){
    tasks.withType(Javadoc){
        options{
            addStringOption('Xdoclint:none', '-quiet')
            addStringOption('-release', '16')
            encoding('UTF-8')
        }
    }
}

if(findProject("desktop")!=null)
project(":desktop"){
    apply plugin: "java"

    dependencies{
        implementation project(":core")
        implementation arcModule("extensions:discord")
        implementation arcModule("natives:natives-filedialogs")
        implementation arcModule("natives:natives-desktop")
        implementation arcModule("natives:natives-freetype-desktop")

        implementation "com.github.Anuken:steamworks4j:$steamworksVersion"

        implementation arcModule("backends:backend-sdl")
    }
}

project(":core"){
    apply plugin: "java-library"
    apply plugin: "kotlin"
    apply plugin: "kotlin-kapt"

    kapt{
        javacOptions{
            option("-source", "16")
            option("-target", "1.8")
        }
    }

    task copyChangelog{
        doLast{
            def props = loadVersionProps()
            def androidVersion = props['androidBuildCode'].toInteger() - 2
            def loglines = file("../changelog").text.split("\n")
            def notice = "[This is a truncated changelog, see Github for full notes]"
            def maxLength = 460

            def androidLogList = [notice] + loglines.findAll{ line -> !line.endsWith("]") || line.endsWith("[Mobile]") || line.endsWith("[Android]")}
            def result = ""
            androidLogList.forEach{line ->
                if(result.length() + line.length() + 1 < maxLength){
                    result += line + "\n"
                }
            }
            def changelogs = file("../fastlane/metadata/android/en-US/changelogs/")
            changelogs.mkdirs()
            try{
                new File(changelogs, androidVersion + ".txt").text = (result)
            }catch(Exception ignored){
            }
        }
    }

    task musicJar(type: Jar){
        archiveClassifier = 'music'
        from files("assets"){
            include "music/*", "sounds/*"
        }
    }

    dependencies{
        api "org.lz4:lz4-java:1.8.0"
        api arcModule("arc-core")
        api arcModule("extensions:flabel")
        api arcModule("extensions:freetype")
        api arcModule("extensions:g3d")
        api arcModule("extensions:fx")
        api arcModule("extensions:arcnet")
        implementation arcModule("extensions:filedialogs")
        api "com.github.Anuken:rhino:$rhinoVersion"
        if(localArc) api arcModule(":extensions:packer")

//        compileOnly 'com.github.bsideup.jabel:jabel-javac-plugin:0.4.2'
        annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:0.4.2'
//        annotationProcessor 'com.github.Anuken:jabel:0.9.0'
        compileOnly project(":annotations")
        if(!project.hasProperty("noKapt")) kapt project(":annotations")
    }

    afterEvaluate{
        task mergedJavadoc(type: Javadoc){
            def blacklist = [project(":server"), project(":annotations"), findProject(":ios"), findProject(":desktop"), findProject(":android")]

            source rootProject.subprojects.collect{ project ->
                if(!blacklist.contains(project) && project.hasProperty("sourceSets")){
                    return project.sourceSets.main.allJava
                }
            }

            classpath = files(rootProject.subprojects.collect { project ->
                if(!blacklist.contains(project) && project.hasProperty("sourceSets")){
                    return project.sourceSets.main.compileClasspath
                }
            })
            destinationDir = new File(buildDir, 'javadoc')
        }
    }

    gradle.taskGraph.whenReady{
        //these are completely unnecessary
        tasks.kaptGenerateStubsKotlin.onlyIf{ false }
        tasks.compileKotlin.onlyIf{ false }
        tasks.inspectClassesForKotlinIC.onlyIf{ false }
    }

    //comp** classes are only used for code generation
    jar{
        exclude("mindustry/entities/comp/**")
    }
}

project(":server"){
    apply plugin: "java"

    dependencies{
        implementation project(":core")
        implementation arcModule("backends:backend-headless")
    }
}

project(":tests"){
    apply plugin: "java"

    dependencies{
        testImplementation project(":core")
        testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
        testImplementation arcModule("backends:backend-headless")
        testImplementation "org.json:json:20230618"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"
    }

    test{
        //fork every test so mods don't interact with each other
        forkEvery = 1
        useJUnitPlatform()
        workingDir = new File("../core/assets")
        testLogging{
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }
}

project(":tools"){
    apply plugin: "java"

    dependencies{
        implementation project(":core")

        implementation arcModule("natives:natives-desktop")
        implementation arcModule("natives:natives-freetype-desktop")
        implementation arcModule("backends:backend-headless")
    }
}

project(":annotations"){
    apply plugin: "java-library"

    dependencies{
        implementation 'com.squareup:javapoet:1.12.1'
        implementation arcModule("arc-core")
    }
}

configure([":core", ":server"].collect{project(it)}){
    java{
        withJavadocJar()
        withSourcesJar()
    }

    publishing{
        publications{
            maven(MavenPublication){
                from components.java
            }
        }
    }
}

task resolveDependencies{
    doLast{
        rootProject.allprojects{ project ->
            Set<Configuration> configurations = project.buildscript.configurations + project.configurations
            configurations.findAll{c -> c.canBeResolved}.forEach{c -> c.resolve()}
        }
    }
}
